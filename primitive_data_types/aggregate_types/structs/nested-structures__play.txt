//-----------------
//-----------------
/* ----------GOLang->GOLearn

Nested Structures  20210922_211741

iabic :-) SDNScottie : structs  20210922_181356
, aggregate types  20210922_181330
, primitive data types  20210922_175129
, A-Z: tutorials/examples  20210307_102425
, GOLang  20210209_210139
, Languages, Computer/Natural

{{c1::A}} KW 38

------------/GOLang->GOLearn */

//=================
//=TOP: 
//=================

/* ----------GOPlay Cisgo :-D

https://www.geeksforgeeks.org/nested-structure-in-golang/

A structure or struct in Golang is a user-defined type, which allows us to create a group of elements of different types into a single unit. Any real-world entity which has some set of properties or fields can be represented as a struct. Go language allows nested structure. A structure which is the field of another structure is known as Nested Structure. Or in other words, a structure within another structure is known as a Nested Structure.

Syntax:

type struct_name_1 struct{
  // Fields
} 
type struct_name_2 struct{
  variable_name  struct_name_1

}

Q: What's so great about GOLang ?
A: Multi-(CORE & THREAD), CONCURRENT, (DevSEC/RESTSec/Cisgo)-Ready, Go Scottie Go.. twitter@cisgoio!

------------/GOPlay twitter@cisgoio :-D */

//=================
//=SRC: https://play.golang.org/p/q0FYTYSDerb
//=================

// Golang program to illustrate
// the nested structure
package main

import "fmt"

// Creating structure
type Author struct {
	name string
	branch string
	year int
}

// Creating nested structure
type HR struct {

	// structure as a field
	details Author
}

func main() {

	// Initializing the fields
	// of the structure
	result := HR{
	
		details: Author{"Sona", "ECE", 2013},
	}

	// Display the values
	fmt.Println("\nDetails of Author")
	fmt.Println(result)
}
